---
- block:
  - name: "CrowdStrike Falcon | Validate Required API URL Is Defined"
    fail:
      msg: "falcon_api_url is not configured! Please configure falcon_api_url and re-run the installation again!"
    when: not falcon_api_url

  - name: CrowdStrike Falcon | Validate CrowdStrike API Client ID Is Defined
    fail:
      msg: falcon_api_client_id is not configured! Please configure falcon_api_client_id and re-run the installation again!
    when: not falcon_api_client_id

  - name: CrowdStrike Falcon | Validate CrowdStrike API Client Secret Is Defined
    fail:
      msg: falcon_api_client_secret is not configured! Please configure falcon_api_client_secret and re-run the installation again!
    when: not falcon_api_client_secret

  when: falcon_install_method == "api"

- name: CrowdStrike Falcon | Configure Python Interpreter for older Linux OSes
  set_fact:
    ansible_python_interpreter: /usr/bin/python
  when: ansible_distribution == "Amazon"

- name: CrowdStrike Falcon | Determine if Endpoint Operating System Is RHEL, CentOS, or Oracle Linux
  set_fact:
     falcon_target_os: RHEL/CentOS/Oracle
     falcon_os_family: "{{ ansible_system | lower }}"
  when: ansible_os_family == "RedHat"

- name: CrowdStrike Falcon | Determine if Target OS Is Amazon Linux
  set_fact:
    falcon_target_os: "Amazon%20Linux"
    falcon_os_family: "{{ ansible_system | lower }}"
  when: ansible_distribution == "Amazon"

- name: CrowdStrike Falcon | Determine if Endpoint Operating System Is SLES
  set_fact:
     falcon_target_os: SLES
     falcon_os_family: "{{ ansible_system | lower }}"
  when: ansible_os_family == "Suse"

- name: "CrowdStrike Falcon | Endpoint Operating System Detected Is {{ ansible_distribution }}"
  set_fact:
     falcon_target_os: "{{ ansible_distribution }}"
     falcon_os_family: "{{ ansible_system | lower }}"
  when:
  - ansible_os_family != "Windows"
  - ansible_distribution in ["Ubuntu", "Debian"]

- name: CrowdStrike Falcon | Determine if Target OS Is MacOS
  set_fact:
    falcon_target_os: "macOS"
    falcon_os_family: "mac"
    falcon_path: "/Applications/Falcon.app/Contents/Resources/"
  when: ansible_distribution == "MacOSX"

- name: "CrowdStrike Falcon | Endpoint Operating System Detected Is Microsoft Windows"
  set_fact:
     falcon_target_os: "{{ ansible_os_family }}"
     falcon_os_family: "{{ ansible_os_family | lower }}"
  when: ansible_os_family == "Windows"

- name: CrowdStrike Falcon | Set default sensor name
  set_fact:
    installed_sensor: falcon-sensor
  when:
    - ansible_pkg_mgr is defined
    - ansible_pkg_mgr in linux_packagers

- name: CrowdStrike Falcon | Set default sensor name for non-Windows installations
  set_fact:
    falcon_sensor_pkg: "{{ installed_sensor }}"
  when:
    - ansible_pkg_mgr is defined
    - ansible_pkg_mgr in linux_packagers
    - falcon_sensor_download is not defined

- name: CrowdStrike Falcon | Verify Temporary Install Directory Exists (non-Windows)
  file: # noqa: risky-file-permissions,208      # We shouldn't try to change permissions if /tmp is used
    path: "{{ falcon_install_tmp_dir }}"
    state: directory
  when:
    - ansible_os_family == "Linux" or ansible_system == "Darwin"
    - falcon_install_tmp_dir is defined

- name: CrowdStrike Falcon | Verify Temporary Install Directory Exists (Windows)
  win_file: # noqa: risky-file-permissions,208      # We shouldn't try to change permissions if /tmp is used
    path: "{{ falcon_install_tmp_dir }}"
    state: directory
  when:
    - ansible_os_family == "Windows"
    - falcon_install_tmp_dir is defined

- name: CrowdStrike Falcon | Verify Falcon is not already installed (macOS)
  stat:
    path: "{{ falcon_path }}"
  when:
    - ansible_system == "Darwin"
    - falcon_path is defined
  register: falcon_already_installed
